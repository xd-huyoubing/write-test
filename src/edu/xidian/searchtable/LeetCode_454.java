package edu.xidian.searchtable;

import java.util.*;

public class LeetCode_454 {

    public int fourSumCount(int[] A, int[] B, int[] C, int[] D) {//311492
        int number = 0;
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < C.length; i++) {
            for (int j = 0; j < D.length; j++) {
                int key = C[i] + D[j];
                if (map.containsKey(key))
                    map.put(key, map.get(key) + 1);
                else
                    map.put(key, 1);
            }
        }

        for (int i = 0; i < A.length; i++) {
            for (int j = 0; j < B.length; j++) {
                int sum = A[i] + B[j];
                if (map.containsKey(-sum))
                    number += map.get(-sum);
            }
        }


        return number;

    }

    /**
     * 暴力解法  四重循环  肯定超出时间限制
     *
     * @param A
     * @param B
     * @param C
     * @param D
     * @return
     */
    public int fourSumCount1(int[] A, int[] B, int[] C, int[] D) {//311492
        int number = 0;
        for (int i = 0; i < A.length; i++)
            for (int j = 0; j < B.length; j++)
                for (int k = 0; k < C.length; k++)
                    for (int l = 0; l < D.length; l++)
                        if (A[i] + B[j] + C[k] + D[l] == 0)
                            number++;
        return number;

    }

    public static void main(String[] args) {
       /* int[] A = {1, 2};
        int[] B = {-2, -1};
        int[] C = {-1, 2};
        int[] D = {0, 2};*/

        int[] A = {0, -19, -7, -3, -18, -29, -29, -23, 4, -31, -3, -25, -10, -15, 8, -8, -32, 6, 10, -14, 4, -29, -15, -20, -29, -26, -11, -20, -25, -30, 3, -6, -12, 9, -10, 9, 10, 4, -28, -18, -4, -16, 0, -15, -31, 9, -28, 2, 3, -14, -11, -7, -9, -4, -27, -4, -26, -23, -31, -2, -11, -7, 7, -3, -19, -5, -11, -6, 10, -26, -30, -5, -4, -6, -22, -21, -29, -14, 0, -28, 5, -16, 5, -21, -30, 2, -22, -10, -10, -9, -11, -20, -17, 1, -4, -17, -18, -15, -30, -29};
        int[] B = {-11, -28, -18, 1, -1, -2, -10, -8, -19, -4, -13, -20, -2, -16, 9, -3, -20, 5, -21, 8, -29, -28, -5, -25, -27, -3, -11, -13, -13, 6, -30, -24, 7, -6, -5, -7, -23, -13, -1, -17, -2, 9, -25, -24, 5, -18, -15, -6, -16, -20, -26, -32, -27, -15, -29, -3, -20, -1, -32, -21, -1, 10, -26, 8, -18, 7, -3, 7, 0, -27, -25, -5, -16, -5, -23, -26, -16, -29, 10, -26, -28, -5, -22, -29, -12, -2, -27, -32, -4, -30, -13, -2, 8, -24, -16, -9, 9, -27, -12, 9};
        int[] C = {-26, 5, 4, -8, -18, -23, -4, 10, 7, -22, -21, -26, -26, -13, -15, -31, -24, -13, -8, -31, -18, -23, -8, -1, -1, 3, -3, -29, -8, -30, -17, -12, -23, -19, -21, -7, -24, 8, -2, -29, -26, -20, 6, 9, -18, -22, -27, -29, -31, 1, -32, -14, -31, -31, -24, -8, -30, -20, 7, -29, -30, -19, -15, 1, 1, -30, -25, -12, -16, -14, 9, -13, 6, -10, -15, -1, -21, -4, -14, 1, -21, -7, -15, -24, -16, 9, -25, -18, -26, -26, -27, -5, 4, -23, 8, 2, -14, -30, 0, -12};
        int[] D = {-5, -15, -26, -25, 5, 3, 1, 2, -1, -1, -29, -11, 6, -23, -12, -27, 1, -18, -10, 1, 9, -2, -21, -12, -7, 2, -8, -26, 3, -6, 0, 7, -22, -9, 5, 10, -29, -14, -25, -9, -1, -32, 1, -14, -27, -29, -30, 8, -15, 2, 3, -11, -19, 4, -26, -10, 3, 2, 8, -25, 7, 1, -19, 2, -9, -8, -30, 1, -29, 2, 0, -7, 6, 1, 6, 8, 1, 7, -8, -28, 3, 4, -30, -2, -10, -1, -11, -3, 0, -19, 0, 4, -3, -29, -15, -13, -7, 10, 10, 9};

        LeetCode_454 leetCode454 = new LeetCode_454();
        int number = leetCode454.fourSumCount(A, B, C, D);
        System.out.println(number);
    }
}
